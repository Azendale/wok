{"name":"Wok","tagline":"WoK - Webserver of Kimchi - a cherrypy framework for multi-purpose plug-ins","body":"Wok (Webserver Originated from Kimchi)\r\n======================================\r\n\r\nWok is a cherrypy-based web framework with HTML5 support that is extended by\r\nplugins which expose functionality through REST APIs.\r\n\r\nExamples of such plugins are Kimchi (Virtualization Management) and Ginger\r\n(System Administration). Wok comes with a sample plugin for education purposes.\r\n\r\nWok runs through wokd daemon.\r\n\r\n\r\nBrowser Support\r\n===============\r\n\r\nWok and its plugins can run in any web browser that supports HTML5. The\r\nKimchi community (responsible for Wok project) makes an effort to\r\ntest it with the latest versions of Chrome and Firefox browsers, but the\r\nfollowing list can be used as reference to browser support.\r\n\r\nDesktop Browser Support:\r\n-----------------------\r\n* **Internet Explorer:** Current version\r\n* **Chrome:** Current version\r\n* **Firefox:** Current version\r\n* **Safari:** Current version\r\n* **Opera:** Current version\r\n\r\nMobile Browser Support:\r\n-----------------------\r\n* **Safari iOS:** Current version\r\n* **Android Browser** Current version\r\n\r\n\r\nHypervisor Distro Support\r\n=========================\r\n\r\nWok might run on any GNU/Linux distribution that meets the conditions\r\ndescribed on the 'Getting Started' section below.\r\n\r\nThe Kimchi community (responsible for Wok project) makes an effort to\r\ntest it with the latest versions of Fedora, RHEL, OpenSUSE, and Ubuntu.\r\n\r\nGetting Started\r\n===============\r\n\r\nInstall Dependencies\r\n--------------------\r\n\r\n**For Fedora and RHEL:**\r\n\r\n     $ sudo yum install gcc make autoconf automake gettext-devel git \\\r\n                        python-cherrypy python-cheetah python-imaging\\\r\n                        PyPAM m2crypto python-jsonschema rpm-build \\\r\n                        python-psutil python-ldap python-lxml \\\r\n                        libxslt nginx openssl python-devel python-pip \\\r\n                        gcc-c++ open-sans-fonts fontawesome-fonts\r\n\r\n     $ sudo pip install cython libsass\r\n\r\n\r\n     # If using RHEL, install the following additional packages:\r\n     $ sudo yum install python-unittest2 python-ordereddict\r\n\r\n    Packages version requirement:\r\n        python-psutil >= 0.6.0\r\n\r\n    # These dependencies are only required if you want to run the tests:\r\n    $ sudo yum install pyflakes python-pep8 python-requests\r\n\r\n*Note for RHEL users*: Some of the above packages are located in the Red Hat\r\nEPEL repositories.  See\r\n[this FAQ](http://fedoraproject.org/wiki/EPEL#How_can_I_use_these_extra_packages.3F)\r\nfor more information on how to configure your system to access this repository.\r\n\r\nAnd for RHEL7 systems, you also need to subscribe to the \"RHEL Server Optional\"\r\nchannel at RHN Classic or Red Hat Satellite.\r\n\r\n**For Ubuntu (Debian-based):**\r\n\r\n    $ sudo apt-get install gcc make autoconf automake gettext git pkgconf \\\r\n                           python-cherrypy3 python-cheetah python-imaging \\\r\n                           python-pam python-m2crypto python-jsonschema \\\r\n                           python-psutil python-ldap python-lxml nginx \\\r\n                           xsltproc openssl python-dev python-pip \\\r\n                           g++ fonts-font-awesome texlive-fonts-extra\r\n\r\n    $ sudo pip install cython libsass\r\n\r\n    Packages version requirement:\r\n        python-jsonschema >= 1.3.0\r\n        python-psutil >= 0.6.0\r\n\r\n    # These dependencies are only required if you want to run the tests:\r\n    $ sudo apt-get install pep8 pyflakes python-requests\r\n\r\n**For openSUSE:**\r\n\r\n    $ sudo zypper install gcc make autoconf automake gettext-tools git \\\r\n                          python-CherryPy python-Cheetah python-pam \\\r\n                          python-imaging python-M2Crypto python-jsonschema \\\r\n                          rpm-build python-psutil python-ldap python-lxml \\\r\n                          libxslt-tools python-xml nginx openssl python-devel \\\r\n                          python-pip gcc-c++ google-opensans-fonts \\\r\n                          fontawesome-fonts\r\n\r\n    $ sudo pip install cython libsass\r\n\r\n    Packages version requirement:\r\n        python-psutil >= 0.6.0\r\n\r\n    # These dependencies are only required if you want to run the tests:\r\n    $ sudo zypper install python-pyflakes python-pep8 python-requests\r\n\r\n\r\nBuild and Install\r\n-----------------\r\n\r\n    $ ./autogen.sh --system\r\n    $ make\r\n    $ sudo make install   # Optional if running from the source tree\r\n\r\n\r\nRun\r\n---\r\n\r\n    $ sudo wokd --host=0.0.0.0\r\n\r\nIf you cannot access Wok, take a look at these 2 points:\r\n\r\n1. Firewall:\r\nWok uses by default the ports 8000, 8001 and 64667. To allow incoming connections:\r\n\r\n    For system using firewalld, do:\r\n\r\n        $ sudo firewall-cmd --add-port=8000/tcp --permanent\r\n        $ sudo firewall-cmd --add-port=8001/tcp --permanent\r\n        $ sudo firewall-cmd --add-port=64667/tcp --permanent\r\n        $ sudo firewall-cmd --reload\r\n\r\n    For openSUSE systems, do:\r\n\r\n        $ sudo /sbin/SuSEfirewall2 open EXT TCP 8000\r\n        $ sudo /sbin/SuSEfirewall2 open EXT TCP 8001\r\n        $ sudo /sbin/SuSEfirewall2 open EXT TCP 64667\r\n\r\n    For system using iptables, do:\r\n\r\n        $ sudo iptables -A INPUT -p tcp --dport 8000 -j ACCEPT\r\n        $ sudo iptables -A INPUT -p tcp --dport 8001 -j ACCEPT\r\n        $ sudo iptables -A INPUT -p tcp --dport 64667 -j ACCEPT\r\n\r\n    Don't forget to correctly save the rules.\r\n\r\n2. SELinux:\r\nAllow httpd_t context for Wok web server:\r\n\r\n        $ sudo semanage permissive -a httpd_t\r\n\r\n\r\nWok Plugins\r\n-----------\r\n\r\nWok provides a Sample plugin to education purposes that can be used to create\r\nnew plugins. Also, by default, Wok is linked to Kimchi (Virtualization\r\n Management) and Ginger (System Administration) repositories as git submodules.\r\n\r\nTo clone Kimchi source code, execute:\r\n\r\n    $ cd src/wok/plugins/kimchi\r\n    $ git submodule update --init --remote\r\n\r\nTo clone Ginger source code, execute:\r\n\r\n    $ cd src/wok/plugins/ginger\r\n    $ git submodule update --init --remote\r\n\r\nTo automatically clone all plugins linked with Wok, use the following git\r\ncommand when cloning Wok project:\r\n\r\n    $ git clone --recursive https://github.com/kimchi-project/wok.git\r\n    $ cd wok\r\n    $ git submodule update --remote\r\n\r\n\r\nParticipating\r\n-------------\r\n\r\nAll patches are sent through our mailing list hosted by oVirt.  More\r\ninformation can be found at:\r\n\r\nhttps://github.com/kimchi-project/kimchi/wiki/Communications\r\n\r\nPatches should be sent using git-send-email to kimchi-devel@ovirt.org.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}